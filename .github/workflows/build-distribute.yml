name: Build and Distribute to Firebase

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      variant:
        required: true
        type: string
      build_type:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1.5.0
        with:
          ndk-version: r27c
          link-to-sdk: true

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.31.1'

      - name: Set up ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.6
          bundler-cache: true

      - name: Verify Ruby installation
        run: ruby -v

      - name: Decode generic google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_GENERIC }}" | base64 --decode > ./app/google-services.json || exit 1

      - name: Decode Firebase Credentials
        run: |
          echo "${{ secrets.FIREBASE_CREDENTIALS_JSON }}" | base64 --decode > firebase_credentials.json

      - name: Print Decoded Firebase Credentials
        run: |
          cat firebase_credentials.json

      - name: Decode Google Play JSON key
        run: |
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" | base64 --decode > ./fastlane/google_play_service_account.json

      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > ${{ github.workspace }}/keystore.jks
          echo "Keystore path: ${{ github.workspace }}/keystore.jks"

      - name: Create local.properties
        run: echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      - name: Build and Distribute app to Firebase
        id: build-and-distribute
        run: |

          # Set app URLs used in the codebase
          export BASE_TMC_URL=${{ secrets.BASE_TMC_URL }}
          export BASE_AMRIT_URL=${{ secrets.BASE_AMRIT_URL }}
          export BASE_FLW_URL=${{ secrets.BASE_FLW_URL }}
          export BASE_ABHA_URL=${{ secrets.BASE_ABHA_URL }}
          export SANJEEVANI_API_URL=${{ secrets.SANJEEVANI_API_URL }}
        

          # Set app release version signing credentials
          export KEYSTORE_PATH=${{ secrets.KEYSTORE_PATH }}
          export KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
          export KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          export KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

          # Set Firebase App Distribution and Google Play authentication tokens
          export FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}

          if [ "${{ inputs.build_type }}" == "debug" ]; then
            bundle exec fastlane build_and_distribute_debug variant:${{ inputs.variant }}
          else
            bundle exec fastlane build_and_distribute_release variant:${{ inputs.variant }}
          fi



      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HLW-Mobile-App - APK(s) ${{ inputs.variant }} generated
          path: |
            ${{ inputs.build_type == 'debug' && 'app/build/outputs/apk/**/debug/*.apk' || 'app/build/outputs/bundle/**/*.aab' }}
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false


      - name: Push to Releases
        if: inputs.variant == 'release'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "app/build/outputs/bundle/**/*.aab"
          tag: v${{ env.version }}-${{ inputs.environment }}-${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}

